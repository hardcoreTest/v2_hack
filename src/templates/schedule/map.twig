{% extends '/layout/main.twig' %}
{% set pageTitle="Мусор разделяй" %}
{% block breadcrumb %}
    <ol class="breadcrumb">
        <li class="active">{{ pageTitle }}</li>
    </ol>
{% endblock %}
{% block content %}
    <div class="row" style="height: 100%;">
        <div class="col-sm-12" style="height: 100%;">
            <div id="map" class="col-sm-8" style="height: 100%;"></div>
            <div id="legend" class="col-sm-4"> </div>
        <div>
    </div>
    </div>
    {% include "/Modal/newUser.twig" %}
{% endblock %}
{% block script %}
            <script>
                        var groups = [
                {% for key, group in groups %}
                {
                    name: '{{  constant("schedule\\Model\\Users::WASTE_TRANSLATE")[key] }}',
                    items: [
                        {% for user in group %}
                                        {
                    center: {{ user['coordinate']|raw  }},
                    name: '{{ user['name'] }}',
                    data: [
                        {% for type in user['type_waste'] %}
                        {weight: 1, color:'{{  constant("schedule\\Model\\Users::WASTE_COLOR")[type] }}' },
                        {% endfor %}
                    ]
                },
                        {% endfor %}
                    ]
                },
                {% endfor %}
    ];

            var myMap;
            var coords;
            var coordText;
            ymaps.ready(init);
            function init() {

    // Создание экземпляра карты.
    var myMap = new ymaps.Map('map', {
            center: [50.443705, 30.530946],
            zoom: 14,
             controls: ['smallMapDefaultSet']

        }, {
            searchControlProvider: 'yandex#search'
        }),
        // Контейнер для меню.
        menu = $('<ul class="menu"></ul>');
        myMap.events.add('click', function (e) {
        if (!myMap.balloon.isOpen()) {
            coords = e.get('coords');
            coordText = [
                    coords[0].toPrecision(6),
                    coords[1].toPrecision(6)
                ].join(', ');
            $('#coordinate').val(coordText);
            myMap.balloon.open(coords, {
                contentHeader:'Событие!',
                contentBody:'<p>Кто-то щелкнул по карте.</p>' +
                    '<p>Координаты щелчка: ' + coordText + '</p>',
                contentFooter:'<sup><button class="form-control btn-primary add-mark" style="margin: 5px" data-toggle="modal"\n'+
'                            data-target="#addUser">Добавить метку</button></sup>'
            });
        }
        else {
            myMap.balloon.close();
        }
    });
            var subscribe = new ymaps.control.Button({
    data: {
        content: 'Подписаться'
    },
    options: {
        // Зададим опции кнопки.
        selectOnClick: false,
        // У кнопки будет три состояния: иконка, текст и текст + иконка.
        // Зададим три значения ширины кнопки для всех состояний.
        maxWidth: [30, 100, 150]
    }
});
            myMap.controls.add(subscribe, {
                float: 'right'
            });

            var saveButton = new ymaps.control.Button({
    data: {
        content: 'Сохранть'
    },
    options: {
        // Зададим опции кнопки.
        selectOnClick: false,
        // У кнопки будет три состояния: иконка, текст и текст + иконка.
        // Зададим три значения ширины кнопки для всех состояний.
        maxWidth: [60, 200, 350]
    }
});
            // myMap.controls.add(saveButton, {
            //     float: 'right'
            // });
            var myCircle = null;
            var isPress = false;

            subscribe.events
              .add(
                'press',
                function () {
                    if (!isPress){
                        subscribe.data.set('content','Cохранить');
                        myCircle = new ymaps.Circle([
                // Координаты центра круга.
                myMap.getCenter(),
                // Радиус круга в метрах.
                5000
            ], {}, {
                // Задаем опции круга.
                // Цвет заливки.
                fillColor: "#DB709377",
                // Цвет обводки.
                strokeColor: "#990066",
                // Прозрачность обводки.
                strokeOpacity: 0.8,
                // Ширина обводки в пикселях.
                strokeWidth: 5
            });
                        myMap.geoObjects.add(myCircle);
                        myCircle.editor.startEditing(myCircle);
                    }else {
                        subscribe.data.set('content','Подписаться');
                        myMap.geoObjects.remove(myCircle);

                    }
                    isPress = !isPress
                }
              );

    // Скрываем хинт при открытии балуна.
    myMap.events.add('balloonopen', function (e) {
        myMap.hint.close();
    });
    for (var i = 0, l = groups.length; i < l; i++) {
        createMenuGroup(groups[i]);
    }

    function createMenuGroup (group) {
        // Пункт меню.
        var menuItem = $('<li><a href="#">' + group.name + '</a></li>'),
        // Коллекция для геообъектов группы.
            collection = new ymaps.GeoObjectCollection(null, { preset: group.style }),
        // Контейнер для подменю.
            submenu = $('<ul class="submenu"></ul>');

        // Добавляем коллекцию на карту.
        myMap.geoObjects.add(collection);
        // Добавляем подменю.
        menuItem
            .append(submenu)
            // Добавляем пункт в меню.
            .appendTo(menu)
            // По клику удаляем/добавляем коллекцию на карту и скрываем/отображаем подменю.
            .find('a')
            .bind('click', function () {
                if (collection.getParent()) {
                    myMap.geoObjects.remove(collection);
                    submenu.hide();
                } else {
                    myMap.geoObjects.add(collection);
                    submenu.show();
                }
            });
        for (var j = 0, m = group.items.length; j < m; j++) {
            createSubMenu(group.items[j], collection, submenu);
        }
    }

    function createSubMenu (item, collection, submenu) {
        // Пункт подменю.
        var submenuItem = $('<li><a href="#">' + item.name + '</a></li>'),
        // Создаем метку.
            placemark = new ymaps.Placemark(
                item.center,
                 {
                     data: item.data,
                         iconContent: "",
                      iconCaption: item.name
                 }, {
            // Зададим произвольный макет метки.
            iconLayout: 'default#pieChart',
            // Радиус диаграммы в пикселях.
            iconPieChartRadius: 30,
            // Радиус центральной части макета.
            iconPieChartCoreRadius: 0,
            // Стиль заливки центральной части.
            iconPieChartCoreFillStyle: '#ffffff',
            // Cтиль линий-разделителей секторов и внешней обводки диаграммы.
            iconPieChartStrokeStyle: '#ffffff',
            // Ширина линий-разделителей секторов и внешней обводки диаграммы.
            iconPieChartStrokeWidth: 3,
            // Максимальная ширина подписи метки.
            iconPieChartCaptionMaxWidth: 200
        });

        // Добавляем метку в коллекцию.
        collection.add(placemark);
        // Добавляем пункт в подменю.
        submenuItem
            .appendTo(submenu)
            // При клике по пункту подменю открываем/закрываем баллун у метки.
            .find('a')
            .bind('click', function () {
                if (!placemark.balloon.isOpen()) {
                    placemark.balloon.open();
                } else {
                    placemark.balloon.close();
                }
                return false;
            });
    }

    // Добавляем меню в тэг BODY.
    menu.appendTo($('#legend'));
    // Выставляем масштаб карты чтобы были видны все группы.
    myMap.setBounds(myMap.geoObjects.getBounds());

    $(document).ready(function() {
        $('.save').click(function () {
                $('.update').hide();
                var _self = this;
                var $btn = $(this).bootstrapBtn('loading');
                jQuery.ajax({
                    url: "{{ path('map_save') }}", //url страницы (action_ajax_form.php)
                    type: "POST", //метод отправки
                    data: jQuery("#newUserData").serialize(),
                    success: function (response) {
                        $btn.bootstrapBtn('reset');
                        if (response.success) {
                            $('#addUser').modal('hide');
                        } else {
                            var errorName = '<p class="bg-danger update">';
                            var errorCoordinate = '<p class="bg-danger update">'
                            if (typeof response.errors.name !== 'undefined') {
                                for (var error in response.errors.name) {
                                    errorName += response.errors.name;
                                }
                                errorName += '</p>';
                                $('#newLogin').before(errorName);
                            }
                            if (typeof response.errors.coordinate !== 'undefined') {
                                for (var error in response.errors.coordinate) {
                                    errorCoordinate += response.errors.coordinate;
                                }
                                errorCoordinate += '</p>';
                                $('#newPassword').before(errorCoordinate);
                            }
                        }
                    }
                });
            });
    });
}
</script>
{% endblock %}